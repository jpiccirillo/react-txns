{"version":3,"sources":["components/Chart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","_Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","chartData","labels","datasets","pointStyle","label","borderColor","backgroundColor","data","inherits","createClass","key","value","react_default","a","createElement","className","Component","defaultProps","displayTitle","displayLegend","legendPosition","titleSize","LineChart","_Chart","apply","arguments","es","height","options","type","animation","duration","responsive","maintainAspectRatio","title","display","text","legend","usePointStyle","position","App","Chart_LineChart","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"4MAGaA,EAAb,SAAAC,GACI,SAAAD,EAAYE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CAkBTC,UAAW,CACPC,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjEC,SAAU,CAAC,CACPC,WAAY,OACZC,MAAO,UACPC,YAAa,UACbC,gBAAiB,kBACjBC,KAAM,CAAC,EAAG,GAAI,EAAG,EAAG,GAAI,GAAI,KAEhC,CACIJ,WAAY,OACZC,MAAO,OACPC,YAAa,UACbC,gBAAiB,kBACjBC,KAAM,CAAC,EAAG,EAAG,GAAI,EAAG,GAAI,EAAG,KAE/B,CACIJ,WAAY,OACZC,MAAO,UACPC,YAAa,UACbC,gBAAiB,kBACjBC,KAAM,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,GAAI,QAzC5Bf,EADvB,OAAAC,OAAAe,EAAA,EAAAf,CAAAJ,EAAAC,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAA,EAAAqB,IAAA,SAAAC,MAAA,WAwDQ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAzD3B1B,EAAA,CAA2B2B,aAAd3B,EAgDF4B,aAAe,CAClBC,cAAc,EACdC,eAAe,EACfC,eAAgB,OAChBC,UAAW,IAWZ,IAAMC,EAAb,SAAAC,GAAA,SAAAD,IAAA,OAAA7B,OAAAC,EAAA,EAAAD,CAAAE,KAAA2B,GAAA7B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA6B,GAAAE,MAAA7B,KAAA8B,YAAA,OAAAhC,OAAAe,EAAA,EAAAf,CAAA6B,EAAAC,GAAA9B,OAAAgB,EAAA,EAAAhB,CAAA6B,EAAA,EAAAZ,IAAA,SAAAC,MAAA,WAKQ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACfH,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAEInB,KAAMZ,KAAKI,MAAMC,UACjB2B,OAAQ,IACRC,QAAS,CACLC,KAAM,OACNC,UAAW,CACPC,SAAU,GAEdC,YAAY,EACZC,qBAAqB,EACrBC,MAAO,CACHC,QAASxC,KAAKJ,MAAM2B,aACpBkB,KAAM,uBAEVC,OAAQ,CACJpC,OAAS,CAACqC,eAAe,GACzBH,QAASxC,KAAKJ,MAAM4B,cACpBoB,SAAU5C,KAAKJ,MAAM6B,wBAzB7CE,EAAA,CAA+BjC,GC5ChBmD,mLAfX,OACI5B,EAAAC,EAAAC,cAAA,YACFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAC2B,EAAD,CAAWpB,UAAU,iBANjBL,aCOE0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpC,EAAAC,EAAAC,cAACmC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FE/HnBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.1b1e122b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Bar, Line, Pie } from 'react-chartjs-2';\n\nexport class Chart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n        //     datasets: [{\n        //         data: [ 1, 2, 3 ],\n        //         borderColor: ['#f87979'],\n        //         backgroundColor: ['gainsboro']\n        //     },\n        //     {\n        //         data: [ 3, 1, 4 ],\n        //         borderColor: ['#f73979'],\n        //         backgroundColor: ['gainsboro']\n        //     },\n        //     {\n        //         data: [2, 1, 4 ],\n        //         borderColor: ['#f18979'],\n        //         backgroundColor: ['gainsboro']\n        //     },\n        // ]\n\n            chartData: {\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n                datasets: [{\n                    pointStyle: 'line',\n                    label: \"Marilyn\",\n                    borderColor: '#f87979',\n                    backgroundColor: 'rgb(0, 0, 0, 0)',\n                    data: [0, 10, 5, 2, 20, 30, 45],\n                },\n                {\n                    pointStyle: 'line',\n                    label: \"Greg\",\n                    borderColor: '#f73979',\n                    backgroundColor: 'rgb(0, 0, 0, 0)',\n                    data: [0, 2, 15, 5, 10, 3, 10],\n                },\n                {\n                    pointStyle: 'line',\n                    label: \"Jeffrey\",\n                    borderColor: '#f18979',\n                    backgroundColor: 'rgb(0, 0, 0, 0)',\n                    data: [0, 18, 15, 12, 120, 50, 35],\n                }]\n            }\n        }\n    }\n\n    static defaultProps = {\n        displayTitle: true,\n        displayLegend: true,\n        legendPosition: 'left',\n        titleSize: 25\n    }\n\n    render() {\n        return (\n            <div className=\"chart\">\n            </div>\n        )\n    }\n}\n\nexport class LineChart extends Chart {\n    // constructor(props) {\n    //     super(props);\n    // }\n    render() {\n        return (\n            <div className=\"line-chart\">\n            <Line\n\n                data={this.state.chartData}\n                height={250}\n                options={{\n                    type: 'line',\n                    animation: {\n                        duration: 0\n                    },\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: this.props.displayTitle,\n                        text: 'Piccirillo Siblings',\n                    },\n                    legend: {\n                        labels : {usePointStyle: true},\n                        display: this.props.displayLegend,\n                        position: this.props.legendPosition\n                    }\n                }}\n            />\n            </div>\n        )\n    }\n}\nexport class BarChart extends Chart {\n    // constructor(props) {\n    //     super(props);\n    // }\n    render() {\n        return (\n            <div className=\"bar-chart\">\n            width={100}\n            height={50}\n            <Bar\n                data={this.state.chartData}\n                options={{\n                    responsive: true,\n                    maintainAspectRatio: false,\n                    title: {\n                        display: this.props.displayTitle,\n                        text: 'Piccirillo Siblings',\n                    },\n                    legend: {\n                        display: this.props.displayLegend,\n                        position: this.props.legendPosition\n                    }\n                }}\n            />\n            </div>\n        )\n    }\n}\n\nexport default Chart;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Chart, { LineChart, BarChart } from './components/Chart'\n\nclass App extends Component {\n  render() {\n    return (\n        <body>\n      <div className=\"grid-container-2\">\n          <div className=\"left\">\n              <LineChart titleSize='30'/>\n          </div>\n      </div>\n      </body>\n    );\n  }\n}\n\n// <div className=\"right\">\n//   <BarChart titleSize='10' legendPosition='right'/>\n// </div>\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}